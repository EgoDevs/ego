type AdminAppCreateBackendRequest = record {
  logo : text;
  name : text;
  description : text;
  version : Version;
  app_id : text;
  category : Category;
  backend_data_hash : text;
  backend_data : vec nat8;
};
type App = record {
  logo : text;
  name : text;
  description : text;
  app_id : text;
  app_hash : text;
  category : Category;
  current_version : Version;
  price : float32;
};
type AppMainNewRequest = record {
  logo : text;
  name : text;
  description : text;
  app_id : text;
  category : Category;
  price : float32;
};
type AppVersion = record {
  id : nat64;
  status : AppVersionStatus;
  wasm : opt Wasm;
  version : Version;
  app_id : text;
  file_id : principal;
};
type AppVersionSetFrontendAddressRequest = record {
  canister_id : principal;
  version : Version;
  app_id : text;
};
type AppVersionStatus = variant {
  NEW;
  REJECTED;
  SUBMITTED;
  REVOKED;
  RELEASED;
  APPROVED;
};
type AppVersionUploadWasmRequest = record {
  data : vec nat8;
  hash : text;
  version : Version;
  app_id : text;
};
type CanisterType = variant { BACKEND; ASSET };
type Category = variant { System; Vault };
type CycleInfo = record {
  records : vec CycleRecord;
  estimate_remaining : nat64;
};
type CycleRecord = record { ts : nat64; balance : nat };
type DevImportV1 = record {
  apps : vec EgoDevAppV1;
  ego_files : vec EgoFile;
  developers : vec Developer;
};
type Developer = record {
  name : text;
  is_app_auditor : bool;
  developer_id : principal;
  created_apps : vec text;
  is_manager : bool;
};
type EgoDevApp = record {
  app : App;
  developer_id : principal;
  versions : vec nat64;
  audit_version : opt Version;
};
type EgoDevAppV1 = record {
  app : App;
  developer_id : principal;
  versions : vec AppVersion;
  audit_version : opt Version;
};
type EgoError = record { msg : text; code : nat16 };
type EgoFile = record { canister_id : principal; wasm_count : nat16 };
type LogEntry = record { ts : nat64; msg : text; kind : text };
type Result = variant { Ok : AppVersion; Err : EgoError };
type Result_1 = variant { Ok; Err : EgoError };
type Result_10 = variant { Ok : CycleInfo; Err : text };
type Result_11 = variant { Ok : bool; Err : text };
type Result_12 = variant { Ok : vec LogEntry; Err : text };
type Result_13 = variant {
  Ok : opt vec record { principal; text };
  Err : text;
};
type Result_14 = variant { Ok : vec Developer; Err : EgoError };
type Result_2 = variant { Ok : bool; Err : EgoError };
type Result_3 = variant { Ok : vec EgoDevApp; Err : EgoError };
type Result_4 = variant { Ok : nat; Err : text };
type Result_5 = variant { Ok : EgoDevApp; Err : EgoError };
type Result_6 = variant { Ok : Developer; Err : EgoError };
type Result_7 = variant { Ok; Err : text };
type Result_8 = variant { Ok : vec record { text; vec principal }; Err : text };
type Result_9 = variant { Ok : vec CycleRecord; Err : text };
type UserRoleSetRequest = record {
  user_id : principal;
  is_app_auditor : bool;
  is_manager : bool;
};
type Version = record { major : nat32; minor : nat32; patch : nat32 };
type Wasm = record {
  canister_id : principal;
  version : Version;
  app_id : text;
  canister_type : CanisterType;
};
service : () -> {
  admin_app_create : (AdminAppCreateBackendRequest) -> (Result);
  admin_app_transfer : (text) -> (Result_1);
  admin_export : () -> (vec nat8);
  admin_import : (DevImportV1) -> ();
  app_version_approve : (text, Version) -> (Result);
  app_version_new : (text, Version) -> (Result);
  app_version_reject : (text, Version) -> (Result);
  app_version_release : (text, Version) -> (Result);
  app_version_revoke : (text, Version) -> (Result);
  app_version_set_frontend_address : (AppVersionSetFrontendAddressRequest) -> (
      Result_2,
    );
  app_version_submit : (text, Version) -> (Result);
  app_version_upload_wasm : (AppVersionUploadWasmRequest) -> (Result_2);
  app_version_wait_for_audit : () -> (Result_3) query;
  balance_get : () -> (Result_4) query;
  developer_app_get : (text) -> (Result_5) query;
  developer_app_list : () -> (Result_3) query;
  developer_app_new : (AppMainNewRequest) -> (Result_5);
  developer_main_get : () -> (Result_6) query;
  developer_main_register : (text) -> (Result_6);
  ego_canister_add : (text, principal) -> (Result_7);
  ego_canister_list : () -> (Result_8);
  ego_canister_remove : (text, principal) -> (Result_7);
  ego_controller_add : (principal) -> (Result_7);
  ego_controller_remove : (principal) -> (Result_7);
  ego_controller_set : (vec principal) -> (Result_7);
  ego_cycle_check : () -> (Result_7);
  ego_cycle_estimate_set : (nat64) -> (Result_7);
  ego_cycle_history : () -> (Result_9);
  ego_cycle_info : () -> (Result_10);
  ego_cycle_recharge : (nat) -> (Result_7);
  ego_cycle_threshold_get : () -> (Result_4);
  ego_is_op : () -> (Result_11) query;
  ego_is_owner : () -> (Result_11) query;
  ego_is_user : () -> (Result_11) query;
  ego_log_list : (nat64) -> (Result_12) query;
  ego_op_add : (principal) -> (Result_7);
  ego_op_list : () -> (Result_13);
  ego_op_remove : (principal) -> (Result_7);
  ego_owner_add : (principal) -> (Result_7);
  ego_owner_add_with_name : (text, principal) -> (Result_7);
  ego_owner_list : () -> (Result_13);
  ego_owner_remove : (principal) -> (Result_7);
  ego_owner_set : (vec principal) -> (Result_7);
  ego_runtime_cycle_threshold_get : () -> (Result_4);
  ego_user_add : (principal) -> (Result_7);
  ego_user_list : () -> (Result_13);
  ego_user_remove : (principal) -> (Result_7);
  ego_user_set : (vec principal) -> (Result_7);
  user_main_list : (text) -> (Result_14) query;
  user_role_set : (UserRoleSetRequest) -> (Result_2);
}