type CycleInfo = record {
  records : vec CycleRecord;
  estimate_remaining : nat64;
};
type CycleRecord = record { ts : nat64; balance : nat };
type InitArg = record { init_caller : opt principal };
type Record = record {
  id : nat64;
  create_at : nat64;
  event : text;
  scope : text;
  message : text;
};
type Result = variant { Ok : nat; Err : text };
type Result_1 = variant { Ok; Err : text };
type Result_2 = variant { Ok : vec record { text; vec principal }; Err : text };
type Result_3 = variant { Ok : vec CycleRecord; Err : text };
type Result_4 = variant { Ok : CycleInfo; Err : text };
type Result_5 = variant { Ok : bool; Err : text };
type Result_6 = variant { Ok : vec text; Err : text };
type Result_7 = variant { Ok : opt vec record { principal; text }; Err : text };
service : (InitArg) -> {
  balance_get : () -> (Result) query;
  ego_canister_add : (text, principal) -> (Result_1);
  ego_canister_list : () -> (Result_2);
  ego_canister_remove : (text, principal) -> (Result_1);
  ego_controller_add : (principal) -> (Result_1);
  ego_controller_remove : (principal) -> (Result_1);
  ego_controller_set : (vec principal) -> (Result_1);
  ego_cycle_check : () -> (Result_1);
  ego_cycle_estimate_set : (nat64) -> (Result_1);
  ego_cycle_history : () -> (Result_3);
  ego_cycle_info : () -> (Result_4);
  ego_cycle_recharge : (nat) -> (Result_1);
  ego_cycle_threshold_get : () -> (Result);
  ego_is_op : () -> (Result_5) query;
  ego_is_owner : () -> (Result_5) query;
  ego_is_user : () -> (Result_5) query;
  ego_log_list : (nat64) -> (Result_6) query;
  ego_op_add : (principal) -> (Result_1);
  ego_op_list : () -> (Result_7);
  ego_op_remove : (principal) -> (Result_1);
  ego_owner_add : (principal) -> (Result_1);
  ego_owner_add_with_name : (text, principal) -> (Result_1);
  ego_owner_list : () -> (Result_7);
  ego_owner_remove : (principal) -> (Result_1);
  ego_owner_set : (vec principal) -> (Result_1);
  ego_runtime_cycle_threshold_get : () -> (Result);
  ego_user_add : (principal) -> (Result_1);
  ego_user_list : () -> (Result_7);
  ego_user_remove : (principal) -> (Result_1);
  ego_user_set : (vec principal) -> (Result_1);
  record_add : (text, text, text, opt nat64) -> ();
  record_amount : () -> (nat64);
  record_list : (nat64) -> (vec Record);
  record_retain : (nat64) -> ();
  record_retain_after : (nat64) -> ();
}