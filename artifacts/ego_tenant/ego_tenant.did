type AppMainInstallRequest = record {
  wasm : Wasm;
  user_id : principal;
  wallet_id : principal;
};
type AppMainReInstallRequest = record { canister_id : principal; wasm : Wasm };
type AppMainUpgradeRequest = record { canister_id : principal; wasm : Wasm };
type BackupInfo = record { state : BackupStatus };
type BackupJob = record { name : text; amount : nat64 };
type BackupStatus = variant { MAINTAINING; RUNNING };
type ByteReadResponse = record {
  total : nat64;
  data : vec nat8;
  hash : text;
  name : text;
};
type CanisterType = variant { BACKEND; ASSET };
type CycleInfo = record {
  records : vec CycleRecord;
  estimate_remaining : nat64;
};
type CycleRecord = record { ts : nat64; balance : nat };
type EgoError = record { msg : text; code : nat16 };
type LogEntry = record { ts : nat64; msg : text; kind : text };
type Result = variant { Ok : vec Task; Err : EgoError };
type Result_1 = variant { Ok; Err : EgoError };
type Result_10 = variant { Ok : CycleInfo; Err : text };
type Result_11 = variant { Ok : bool; Err : text };
type Result_12 = variant { Ok : vec LogEntry; Err : text };
type Result_13 = variant {
  Ok : opt vec record { principal; text };
  Err : text;
};
type Result_14 = variant { Ok : opt ByteReadResponse; Err : text };
type Result_2 = variant { Ok : principal; Err : EgoError };
type Result_3 = variant { Ok : bool; Err : EgoError };
type Result_4 = variant { Ok; Err : text };
type Result_5 = variant { Ok : BackupInfo; Err : text };
type Result_6 = variant { Ok : vec BackupJob; Err : text };
type Result_7 = variant { Ok : nat; Err : text };
type Result_8 = variant { Ok : vec record { text; vec principal }; Err : text };
type Result_9 = variant { Ok : vec CycleRecord; Err : text };
type Task = record {
  canister_id : principal;
  next_check_time : nat64;
  last_update : nat64;
  last_cycle : opt nat;
  try_count : nat8;
};
type Version = record { major : nat32; minor : nat32; patch : nat32 };
type Wasm = record {
  canister_id : principal;
  version : Version;
  app_id : text;
  canister_type : CanisterType;
};
service : () -> {
  admin_export : () -> (vec nat8);
  admin_import : (vec Task) -> ();
  admin_task_check : (principal) -> ();
  admin_task_list : (nat64) -> (Result);
  app_main_delete : (principal) -> (Result_1);
  app_main_install : (AppMainInstallRequest) -> (Result_2);
  app_main_reinstall : (AppMainReInstallRequest) -> (Result_3);
  app_main_upgrade : (AppMainUpgradeRequest) -> (Result_3);
  backup_change_status : (BackupStatus) -> (Result_4);
  backup_info_get : () -> (Result_5);
  backup_job_list : () -> (Result_6);
  balance_get : () -> (Result_7) query;
  canister_main_track : (principal) -> (Result_1);
  canister_main_untrack : (principal) -> (Result_1);
  ego_canister_add : (text, principal) -> (Result_4);
  ego_canister_list : () -> (Result_8);
  ego_canister_remove : (text, principal) -> (Result_4);
  ego_controller_add : (principal) -> (Result_4);
  ego_controller_remove : (principal) -> (Result_4);
  ego_controller_set : (vec principal) -> (Result_4);
  ego_cycle_check : () -> (Result_4);
  ego_cycle_check_cb : (vec CycleRecord, nat) -> (Result_1);
  ego_cycle_estimate_set : (nat64) -> (Result_4);
  ego_cycle_history : () -> (Result_9);
  ego_cycle_info : () -> (Result_10);
  ego_cycle_recharge : (nat) -> (Result_4);
  ego_cycle_threshold_get : () -> (Result_7);
  ego_is_op : () -> (Result_11) query;
  ego_is_owner : () -> (Result_11) query;
  ego_is_user : () -> (Result_11) query;
  ego_log_list : (nat64) -> (Result_12) query;
  ego_op_add : (principal) -> (Result_4);
  ego_op_list : () -> (Result_13);
  ego_op_remove : (principal) -> (Result_4);
  ego_owner_add : (principal) -> (Result_4);
  ego_owner_add_with_name : (text, principal) -> (Result_4);
  ego_owner_list : () -> (Result_13);
  ego_owner_remove : (principal) -> (Result_4);
  ego_owner_set : (vec principal) -> (Result_4);
  ego_runtime_cycle_threshold_get : () -> (Result_7);
  ego_user_add : (principal) -> (Result_4);
  ego_user_list : () -> (Result_13);
  ego_user_remove : (principal) -> (Result_4);
  ego_user_set : (vec principal) -> (Result_4);
  job_data_backup : (text, nat64, nat64) -> (Result_14);
  job_data_export : (text, nat64, nat64, nat64) -> (Result_14);
  job_data_restore : (text, vec nat8) -> (Result_4);
  reset_next_check_time : () -> ();
  wallet_cycle_recharge : (nat) -> (Result_1);
}